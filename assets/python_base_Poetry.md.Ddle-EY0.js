import{_ as i,c as o,o as s,a2 as t}from"./chunks/framework.CQECOx-R.js";const k=JSON.parse('{"title":"Poetry","description":"","frontmatter":{},"headers":[],"relativePath":"python/base/Poetry.md","filePath":"python/base/Poetry.md","lastUpdated":1746516944000}'),l={name:"python/base/Poetry.md"};function a(p,e,n,r,d,c){return s(),o("div",null,e[0]||(e[0]=[t(`<h1 id="poetry" tabindex="-1">Poetry <a class="header-anchor" href="#poetry" aria-label="Permalink to &quot;Poetry&quot;">​</a></h1><blockquote><p>Poetry: PYTHON PACKAGING AND DEPENDENCY MANAGEMENT MADE EASY</p><p><a href="https://python-poetry.org/" target="_blank" rel="noreferrer">https://python-poetry.org/</a></p></blockquote><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Poetry是一个Python包管理工具，类似于pip，但是远比pip强大，除了依赖管理外，还能自动解析依赖的关系，还可以管理项目的虚拟环境，打包、发布。</p><blockquote><p>pip的缺陷：移除依赖时不能自动解析依赖的关系</p><p>如果执行pip install flask，pip会自动安装flask所依赖的包，但是如果执行pip uninstall flask，pip只会移除flask包，而不会移除flask依赖的包，这样就会导致项目中存在无用的包，只能我们手动移除。但是手动移除包是很危险的，因为一不小心可能会把其他包依赖的包删除了导致项目不能正常运行。</p></blockquote><p>Poetry使用了<a href="https://peps.python.org/pep-0518/" target="_blank" rel="noreferrer">PEP 518</a>提出的<code>pyproject.toml</code>配置文件，在依赖管理方面替代了传统的<code>requirements.txt</code>，在构建方面替换了传统的<code>setup.py</code>，更加清晰、灵活。</p><h2 id="安装和基本使用" tabindex="-1">安装和基本使用 <a class="header-anchor" href="#安装和基本使用" aria-label="Permalink to &quot;安装和基本使用&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><blockquote><p><a href="https://python-poetry.org/docs/#installing-with-the-official-installer" target="_blank" rel="noreferrer">https://python-poetry.org/docs/#installing-with-the-official-installer</a></p></blockquote><p>Poetry在各个操作系统的默认安装路径：</p><ul><li><code>~/Library/Application Support/pypoetry</code> on MacOS.</li><li><code>~/.local/share/pypoetry</code> on Linux/Unix.</li><li><code>%APPDATA%\\pypoetry</code> on Windows.</li></ul><p>在安装时指定<code>POETRY_HOME</code>环境变量：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://install.python-poetry.org</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> POETRY_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/poetry</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><p>将<code>$POETRY_HOME/bin</code>添加到PATH</p><p>查看版本：<code>poetry --version</code></p><p>更新版本：<code>poetry self update</code></p><p>命令补全：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ZSH_CUSTOM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/plugins/poetry</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> completions</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zsh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ZSH_CUSTOM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/plugins/poetry/_poetr</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .zshrc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  git</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  zsh-autosuggestions</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  zsh-syntax-highlighting</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  poetry</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h3><ul><li>初始化项目：<code>poetry init</code></li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><ul><li>配置虚拟环境生成到项目路径下：<code>poetry config virtualenvs.in-project true</code></li></ul><blockquote><p>默认的情况poetry会将虚拟环境生成到特定目录(根据操作系统有不同)，命名规则为项目名-random-python版本，这样并不方便管理，所以改为在项目目录下生成虚拟环境，更符合使用习惯，修改后生成的虚拟环境在项目路径下的.venv</p></blockquote><ul><li>创建虚拟环境：<code>poetry env use python</code></li></ul><blockquote><p>取决于python在PATH中link的版本，也可以改为poetry env use python3.11</p></blockquote><ul><li>启动虚拟环境：<code>poetry shell</code></li><li>退出虚拟环境：<code>exit</code></li><li>新增依赖：<code>poetry add</code></li></ul><blockquote><p>执行poetry add后会自动将add的包信息和版本添加到pyproject.toml中(不会记录该包依赖的其他包)，这样就可以区分出主动安装的是什么包，和基于依赖关系安装的是什么包。</p><p>除了pyproject.toml，项目中还会生成一个poetry.lock文件(类似npm的lock文件或原来的requirements.txt)，记录安装的所有依赖和对应版本</p></blockquote><ul><li><p>指定版本新增依赖：</p><ul><li><code>^</code>：表示匹配指定版本的最新次版本（minor version）和补丁版本（patch version），但不改变主版本（major version）。 <ul><li>示例：<code>poetry add Django@^2.1.0</code> 表示匹配2.x.x中最新的版本不包括3.0.0。</li></ul></li><li><code>~</code>：表示匹配指定版本的最新补丁版本，不改变主版本和次版本。 <ul><li>示例：<code>poetry add Django@~1.2.3</code>表示匹配1.2.x中最新的版本，但不包括1.3.0。</li></ul></li><li><code>&gt;=</code>：表示匹配指定版本或更高版本，不限制最后一位的变化。 <ul><li>示例：<code>poetry add Django&gt;=3.2.0</code>表示匹配Django3.2版本及其更高版本。</li></ul></li><li><code>==</code>：表示严格匹配指定版本。 <ul><li>示例：<code>poetry add numpy==1.21.3</code>表示只匹配精确版本号为1.21.3。</li></ul></li></ul></li><li><p>新增依赖到dev-dependencies：<code>poetry add xxx -D</code>或<code>poetry add xxx --dev</code></p></li><li><p>手动更新依赖版本：</p><ul><li>更新<code>pyproject.toml</code>中的依赖版本</li><li>更新lock文件中的版本：<code>poetry lock</code></li><li>重新安装依赖到虚拟环境：<code>poetry install</code></li></ul></li><li><p><code>poetry install</code></p><ul><li><strong>安装依赖项：</strong> 执行该命令将会读取<code>pyproject.toml</code>文件中的<code>[tool.poetry.dependencies]</code>部分，并根据其中的规范（例如包的名称和版本要求）来安装依赖项。</li><li><strong>生成锁文件：</strong> 如果项目中没有<code>poetry.lock</code>文件，<code>poetry install</code>会生成<code>poetry.lock</code>文件。这个锁文件包含了确切的依赖项版本，确保在不同的环境中使用相同的软件包版本。</li><li><strong>加速依赖项安装：</strong> 如果存在<code>poetry.lock</code>文件，<code>poetry install</code>将首先检查锁文件并使用其中的版本信息，而不是重新计算依赖关系。这有助于提高依赖项安装的速度。</li><li><strong>创建虚拟环境：</strong> 如果项目中没有虚拟环境<code>poetry install</code>会自动创建一个虚拟环境，并将依赖项安装到该虚拟环境中。如果已经存在虚拟环境，将会使用现有的虚拟环境。</li></ul></li><li><p>更新依赖：<code>poetry update</code></p></li><li><p>列出依赖：<code>poetry show</code></p><ul><li>树状依赖：<code>poetry show --tree</code></li></ul></li><li><p>移除依赖：<code>poetry remove</code></p></li><li><p>输出requirements.txt：<code>poetry export</code></p><ul><li><code>poetry export -f requirements.txt -o requirements.txt --without-hashes</code></li></ul></li><li><p>打包：<code>poetry build</code></p><ul><li>只打包wheel：<code>poetry build -f wheel</code></li></ul></li><li><p>发布：<code>poetry publish</code></p><blockquote><p>需要配置仓库</p></blockquote></li></ul>`,29)]))}const y=i(l,[["render",a]]);export{k as __pageData,y as default};
