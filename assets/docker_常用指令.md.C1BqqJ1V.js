import{_ as i,c as a,o as e,a2 as t}from"./chunks/framework.CQECOx-R.js";const c=JSON.parse('{"title":"常用指令","description":"","frontmatter":{},"headers":[],"relativePath":"docker/常用指令.md","filePath":"docker/常用指令.md","lastUpdated":1746516944000}'),l={name:"docker/常用指令.md"};function n(h,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="常用指令" tabindex="-1">常用指令 <a class="header-anchor" href="#常用指令" aria-label="Permalink to &quot;常用指令&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://get.docker.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span></span></code></pre></div><h2 id="dockerfile给ubuntu换源" tabindex="-1">Dockerfile给ubuntu换源 <a class="header-anchor" href="#dockerfile给ubuntu换源" aria-label="Permalink to &quot;Dockerfile给ubuntu换源&quot;">​</a></h2><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span></span></code></pre></div><h2 id="macos运行容器时同步宿主机时间" tabindex="-1">macOS运行容器时同步宿主机时间 <a class="header-anchor" href="#macos运行容器时同步宿主机时间" aria-label="Permalink to &quot;macOS运行容器时同步宿主机时间&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TZ=\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -la</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/localtime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cut</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f8-9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span></code></pre></div><h2 id="macos中容器访问宿主机" tabindex="-1">MacOS中容器访问宿主机 <a class="header-anchor" href="#macos中容器访问宿主机" aria-label="Permalink to &quot;MacOS中容器访问宿主机&quot;">​</a></h2><p>可以用<code>host.docker.internal</code>来访问宿主机</p><blockquote><p><a href="https://docs.docker.com/desktop/networking/#use-cases-and-workarounds" target="_blank" rel="noreferrer">https://docs.docker.com/desktop/networking/#use-cases-and-workarounds</a></p></blockquote><h2 id="构建跨平台镜像" tabindex="-1">构建跨平台镜像 <a class="header-anchor" href="#构建跨平台镜像" aria-label="Permalink to &quot;构建跨平台镜像&quot;">​</a></h2><h3 id="docker-buildx" tabindex="-1">docker buildx <a class="header-anchor" href="#docker-buildx" aria-label="Permalink to &quot;docker buildx&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建builder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> buildx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cross-platform-builder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --driver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-container</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --use</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行构建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> buildx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --platform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux/amd64,linux/arm64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 镜像名:tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-o </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">type=registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> --push]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看推送到远程的镜像信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> buildx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imagetools</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 镜像名:tag</span></span></code></pre></div><p>buildx 实例通过两种方式来执行构建任务，两种执行方式被称为使用不同的「驱动」：</p><ul><li><code>docker</code> 驱动：使用 Docker 服务程序中集成的 BuildKit 库执行构建。</li><li><code>docker-container</code> 驱动：启动一个包含 BuildKit 的容器并在容器中执行构建。</li></ul><p><code>docker</code> 驱动无法使用一小部分 <code>buildx</code> 的特性（如在一次运行中同时构建多个平台镜像），此外在镜像的默认输出格式上也有所区别：<code>docker</code> 驱动默认将构建结果以 Docker 镜像格式直接输出到 <code>docker</code> 的镜像目录（通常是 <code>/var/lib/overlay2</code>），之后执行 <code>docker images</code> 命令可以列出所输出的镜像；而 <code>docker container</code> 则需要通过 <code>--output</code> 选项指定输出格式为镜像或其他格式。</p><p><code>docker buildx build</code> 支持丰富的输出行为，通过<code>--output=[PATH,-,type=TYPE[,KEY=VALUE]</code> 选项可以指定构建结果的输出类型和路径等，常用的输出类型有以下几种：</p><ul><li>local：构建结果将以文件系统格式写入 <code>dest</code> 指定的本地路径， 如 <code>--output type=local,dest=./output</code>。</li><li>tar：构建结果将在打包后写入 <code>dest</code> 指定的本地路径。</li><li>oci：构建结果以 OCI 标准镜像格式写入 <code>dest</code> 指定的本地路径。</li><li>docker：构建结果以 Docker 标准镜像格式写入 <code>dest</code> 指定的本地路径或加载到 <code>docker</code> 的镜像库中。同时指定多个目标平台时无法使用该选项。</li><li>image：以镜像或者镜像列表输出，并支持 <code>push=true</code> 选项直接推送到远程仓库，同时指定多个目标平台时可使用该选项。</li><li>registry：<code>type=image,push=true</code> 的精简表示。</li></ul><blockquote><p><a href="https://waynerv.com/posts/building-multi-architecture-images-with-docker-buildx/" target="_blank" rel="noreferrer">https://waynerv.com/posts/building-multi-architecture-images-with-docker-buildx/</a></p></blockquote><h2 id="docker-pull配置代理" tabindex="-1">docker pull配置代理 <a class="header-anchor" href="#docker-pull配置代理" aria-label="Permalink to &quot;docker pull配置代理&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/systemd/system/docker.service.d/http-proxy.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [Service]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Environment=&quot;HTTP_PROXY=http://ip:port&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Environment=&quot;HTTPS_PROXY=http://ip:port&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以通过下面命令检查是否生效</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --property=Environment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span></span></code></pre></div><h2 id="docker-logs文件大小配置" tabindex="-1">docker logs文件大小配置 <a class="header-anchor" href="#docker-logs文件大小配置" aria-label="Permalink to &quot;docker logs文件大小配置&quot;">​</a></h2><p>修改 Docker 全局配置 <code>vim /etc/docker/daemon.json</code>后重启<code>systemctl restart docker</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;log-driver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;json-file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;log-opts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;max-size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;500m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;max-file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,24)]))}const u=i(l,[["render",n]]);export{c as __pageData,u as default};
