import{_ as i,c as e,o as s,a2 as t}from"./chunks/framework.CQECOx-R.js";const u=JSON.parse('{"title":"Linux服务器文件目录共享映射配置","description":"","frontmatter":{},"headers":[],"relativePath":"linux/env/Linux服务器文件目录共享映射配置.md","filePath":"linux/env/Linux服务器文件目录共享映射配置.md","lastUpdated":1746516944000}'),n={name:"linux/env/Linux服务器文件目录共享映射配置.md"};function l(r,a,o,d,p,c){return s(),e("div",null,a[0]||(a[0]=[t(`<h1 id="linux服务器文件目录共享映射配置" tabindex="-1">Linux服务器文件目录共享映射配置 <a class="header-anchor" href="#linux服务器文件目录共享映射配置" aria-label="Permalink to &quot;Linux服务器文件目录共享映射配置&quot;">​</a></h1><p>使用场景：由于公司没有单独的文件服务器/nas之类的共享存储，图片之类的也没有上云，目前业务中上传的文件也是放在应用服务器当中的。生产环境都是高可用的多节点部署，这样就会产生问题。比如用户上传一张图片，请求被分发到A服务器中，由于图片访问的域名是统一的B服务器域名，上传完成后用B服务器的域名去访问静态文件就会404。后续我们考虑搭建fastdfs来统一管理文件。目前的临时解决方案是通过配置服务器共享目录来实现文件在多个节点服务器间的同步。</p><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><ul><li><p>环境：CentOS 7.6</p></li><li><p>分别在A、B两台服务器上安装nfs和rpcbind</p><ul><li><code>yum install nfs-utils rpcbind</code></li></ul></li></ul><h2 id="server配置" tabindex="-1">server配置 <a class="header-anchor" href="#server配置" aria-label="Permalink to &quot;server配置&quot;">​</a></h2><p>比如我们的静态资源存储在B服务器，则需要把B服务器的目录暴露出来，共享给A服务器，让A服务器挂载该目录。</p><ul><li><p>在B服务器（提供资源的服务器）上修改/etc/exports文件，把指定的目录暴露给A服务器并分配权限</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /需要暴露的目录 A服务器IP（rw,async,no_root_squash)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/data/images</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.111.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rw,async,no_root_squash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>修改完后需要使配置立即生效，执行<code>exportfs -arv</code>命令</p></li><li><p>关闭防火墙/端口111(tcp/udp)、2049(tcp)、4046(udp)向指定ip开放</p></li></ul><h2 id="启动nfs服务和rpcbind服务" tabindex="-1">启动nfs服务和rpcbind服务 <a class="header-anchor" href="#启动nfs服务和rpcbind服务" aria-label="Permalink to &quot;启动nfs服务和rpcbind服务&quot;">​</a></h2><ul><li><code>service rpcbind start</code></li><li><code>service nfs start</code></li></ul><h2 id="在a服务器中挂载远程目录" tabindex="-1">在A服务器中挂载远程目录 <a class="header-anchor" href="#在a服务器中挂载远程目录" aria-label="Permalink to &quot;在A服务器中挂载远程目录&quot;">​</a></h2><p>执行命令：<code>mount -o rw -t nfs B服务器IP:/B服务器暴露的路径 /要映射的本机(A服务器)的路径</code></p><p>例如：<code>mount -o rw -t nfs 192.168.111.2:/data/images /data/images</code></p><h2 id="验证" tabindex="-1">验证 <a class="header-anchor" href="#验证" aria-label="Permalink to &quot;验证&quot;">​</a></h2><p>可以在A服务器的/data/images下上传一些文件，然后看B服务器中的/data/images目录中是否同步，如果同步了则说明挂载成功，共享目录就配置完成了。</p>`,14)]))}const k=i(n,[["render",l]]);export{u as __pageData,k as default};
