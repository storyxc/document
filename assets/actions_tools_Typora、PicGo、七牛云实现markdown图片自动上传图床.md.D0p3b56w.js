import{_ as o,c as e,o as r,a2 as t}from"./chunks/framework.CQECOx-R.js";const m=JSON.parse('{"title":"Typora、PicGo、七牛云实现markdown图片自动上传图床","description":"","frontmatter":{},"headers":[],"relativePath":"actions/tools/Typora、PicGo、七牛云实现markdown图片自动上传图床.md","filePath":"actions/tools/Typora、PicGo、七牛云实现markdown图片自动上传图床.md","lastUpdated":1746516944000}'),i={name:"actions/tools/Typora、PicGo、七牛云实现markdown图片自动上传图床.md"};function p(c,a,l,n,s,g){return r(),e("div",null,a[0]||(a[0]=[t('<h1 id="typora、picgo、七牛云实现markdown图片自动上传图床" tabindex="-1">Typora、PicGo、七牛云实现markdown图片自动上传图床 <a class="header-anchor" href="#typora、picgo、七牛云实现markdown图片自动上传图床" aria-label="Permalink to &quot;Typora、PicGo、七牛云实现markdown图片自动上传图床&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>由于最近刚把博客迁到VuePress上来，写博客从原来自己博客项目自定义的web端Markdown编辑器换回了原来的<strong>Typora</strong>，这个文本编辑工具虽然很好用，但是在markdown中插入图片的时候就会碰到比较烦的问题，可能随便截了个图放在桌面了，在markdown中引入的话还要先把图片放到vuepress项目的静态资源文件夹里面。原来我自己开发的博客编辑器是通过axios调用后台接口把图片传到七牛云图床上去，现在换了博客框架原来的方案不好使了。之前typora也没有这方面的支持。不过我发现typora更新之后也支持了添加图片后的事件触发。</p><p><img src="https://storyxc.com/images/blog//image-20210410202031986.png" alt="image-20210410202031986"></p><p>选项还是很多样的，为typora点赞。</p><p>这里我还是选择了上传到图床，上传支持PicGo和自定义脚本，本来打算写个python脚本的，后来发现picgo这个应用也很好用，那就直接拿过来用吧。</p><h2 id="配置picgo" tabindex="-1">配置picgo <a class="header-anchor" href="#配置picgo" aria-label="Permalink to &quot;配置picgo&quot;">​</a></h2><h3 id="通过gui配置" tabindex="-1">通过gui配置 <a class="header-anchor" href="#通过gui配置" aria-label="Permalink to &quot;通过gui配置&quot;">​</a></h3><h4 id="_1-下载picgo" tabindex="-1">1.下载picgo <a class="header-anchor" href="#_1-下载picgo" aria-label="Permalink to &quot;1.下载picgo&quot;">​</a></h4><p>点击<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noreferrer">PicGo</a> 进入仓库下载，这里选择windows版的执行程序，下载之后打开</p><h4 id="_2-申请七牛云账号配置存储空间" tabindex="-1">2.申请七牛云账号配置存储空间 <a class="header-anchor" href="#_2-申请七牛云账号配置存储空间" aria-label="Permalink to &quot;2.申请七牛云账号配置存储空间&quot;">​</a></h4><p>没有图床的可以搜一下相关教程，这里不再赘述</p><h4 id="_3-配置图床信息" tabindex="-1">3.配置图床信息 <a class="header-anchor" href="#_3-配置图床信息" aria-label="Permalink to &quot;3.配置图床信息&quot;">​</a></h4><p><img src="https://storyxc.com/images/blog//image-20210410202814211.png" alt="image-20210410202814211"></p><p><img src="https://storyxc.com/images/blog//image-20210413020009764.png" alt="image-20210413020009764"></p><p>选择七牛云图床、或者自己选择其他图床也许，按照自己情况来。</p><ul><li>七牛云的AccessKey和SecretKey在七牛云的密钥管理界面</li><li>储存空间名就是自己的对象存储里面的具体某个空间名</li><li>访问网址如果你有配自定义的cdn就填cdn，如果没有那就是原生的地址，在空间概览页面，不要忘了加上协议<a href="http://xn--https-wm6jl44o" target="_blank" rel="noreferrer">http://或者https</a>😕/</li><li>存储区域指的是华南华北这些地区对应的编号，具体对应值见下图，比如我是华南，存储区域就填z2</li><li>设置完成后不要忘记点一下设为默认图床，否则默认不会用七牛云的，其他图床同理</li></ul><p><img src="https://storyxc.com/images/blog//image-20210410203157833.png" alt="image-20210410203157833"></p><h4 id="_4-回到typora测试一下吧" tabindex="-1">4.回到typora测试一下吧 <a class="header-anchor" href="#_4-回到typora测试一下吧" aria-label="Permalink to &quot;4.回到typora测试一下吧&quot;">​</a></h4><p><img src="https://storyxc.com/images/blog//image-20210410203327770.png" alt="image-20210410203327770"></p><p><img src="https://storyxc.com/images/blog//image-20210410203412022.png" alt="image-20210410203412022"></p><p>先验证一下，可以看到成功了。这样再在typora中添加图片就可以看到图片会自动上传到你的图床并修改markdown中的地址了。</p><h3 id="通过picgo-core配置" tabindex="-1">通过picgo-core配置 <a class="header-anchor" href="#通过picgo-core配置" aria-label="Permalink to &quot;通过picgo-core配置&quot;">​</a></h3><p>npm安装picgo-core：<code>npm install -g picgo</code></p><p>配置uploader：<code>picgo set uploader</code></p><p>使用uploader：<code>picgo use uploader</code></p><blockquote><p>配置文件地址为~/.picgo/config.json，可以手动修改</p></blockquote><p>配置完成后在typora中配置自定义命令上传，命令格式 <code>node_path picgo_path upload</code>例如我的是<code>/opt/homebrew/bin/node /opt/homebrew/bin/picgo upload</code></p><p><img src="https://storyxc.com/images/blog/image-20220214180934655.png" alt="image-20220214180934655"></p><p>验证上传选项，看到返回图片地址即可</p>',30)]))}const h=o(i,[["render",p]]);export{m as __pageData,h as default};
