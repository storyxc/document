import{_ as i,c as r,o,a2 as e}from"./chunks/framework.CQECOx-R.js";const d=JSON.parse('{"title":"JavaSPI机制和Springboot自动装配原理","description":"","frontmatter":{},"headers":[],"relativePath":"java/framework/JavaSPI机制和Springboot自动装配原理.md","filePath":"java/framework/JavaSPI机制和Springboot自动装配原理.md","lastUpdated":1746516944000}'),t={name:"java/framework/JavaSPI机制和Springboot自动装配原理.md"};function s(l,a,p,n,c,g){return o(),r("div",null,a[0]||(a[0]=[e('<h1 id="javaspi机制和springboot自动装配原理" tabindex="-1">JavaSPI机制和Springboot自动装配原理 <a class="header-anchor" href="#javaspi机制和springboot自动装配原理" aria-label="Permalink to &quot;JavaSPI机制和Springboot自动装配原理&quot;">​</a></h1><h2 id="spi机制" tabindex="-1">SPI机制 <a class="header-anchor" href="#spi机制" aria-label="Permalink to &quot;SPI机制&quot;">​</a></h2><p><code>SPI（Service Provider Interface）</code>是一种服务发现机制，提供服务接口，且为该接口寻找服务的实现。</p><p>从Java6开始引入，是一种基于ClassLoader类加载器发现并加载服务的机制。</p><p>标准的SPI构成：</p><ul><li>Service：公开的接口或抽象类，定义一个抽象的功能模块</li><li>Service Provider：Service接口/抽象类的具体实现</li><li>ServiceLoader：SPI中的核心组件，负责在<strong>运行时</strong>发现并加载Service Provider</li></ul><h3 id="java-spi的规范要素" tabindex="-1">JAVA SPI的规范要素 <a class="header-anchor" href="#java-spi的规范要素" aria-label="Permalink to &quot;JAVA SPI的规范要素&quot;">​</a></h3><ul><li>规范的配置文件 <ul><li>文件路径：必须要在JAR中的META-INF/services下</li><li>文件名称：<strong>Service接口</strong>全限定名</li><li>文件内容：<strong>Service实现类</strong>的全限定名，如果有多个，则每个类单独占一行</li></ul></li><li>ServiceProvider必须有无参构造方法，因为要通过反射实例化</li><li>保证能加载到配置文件和ServiceProvider类 <ul><li>将jar包放到classpath下</li><li>jar包安装到jre的扩展目录下</li><li>自定义一个ClassLoader</li></ul></li></ul><h3 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h3><p>SPI在JDBC中的应用：JDBC要求Driver实现类在类加载的时候将自身的实例注册到DriverManager中，从而加载数据库驱动，在SPI出现之前，加载数据库驱动时要执行<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>， 在SPI出现后，只需要引入对应依赖的JAR包后，ServiceLoader会自动去约定的路径下寻找需要加载的类。</p><h4 id="以mysql-connector-java的jar文件为例" tabindex="-1">以mysql-connector-java的jar文件为例 <a class="header-anchor" href="#以mysql-connector-java的jar文件为例" aria-label="Permalink to &quot;以mysql-connector-java的jar文件为例&quot;">​</a></h4><ul><li><p>配置文件</p></li><li><p>无参构造器</p></li></ul><p><img src="https://storyxc.com/images/blog/image-20220410224639940.png" alt="image-20220410224639940"></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>SPI提供了一种<strong>组件发现和注册的方式</strong>，可以用于各种插件、组件的灵活替换</li><li>可以实现模块间解耦</li><li>面向接口+配置文件+反射</li><li>应用：JDBC、SLF4J。。。</li></ul><h3 id="简单实例" tabindex="-1">简单实例 <a class="header-anchor" href="#简单实例" aria-label="Permalink to &quot;简单实例&quot;">​</a></h3><p><img src="https://storyxc.com/images/blog/image-20220410231011833.png" alt="image-20220410231011833"></p><p><img src="https://storyxc.com/images/blog/image-20220410231049522.png" alt="image-20220410231049522"></p><p><img src="https://storyxc.com/images/blog/image-20220410231109810.png" alt="image-20220410231109810"></p><p>当spi-company依赖spi-lt时运行main方法：</p><p><img src="https://storyxc.com/images/blog/image-20220410231225984.png" alt="image-20220410231225984"></p><p>当spi-company依赖spi-yd时运行main方法：</p><p><img src="https://storyxc.com/images/blog/image-20220410231313507.png" alt="image-20220410231313507"></p><h2 id="springboot的自动装配" tabindex="-1">springboot的自动装配 <a class="header-anchor" href="#springboot的自动装配" aria-label="Permalink to &quot;springboot的自动装配&quot;">​</a></h2><p>自动装配，即auto-configuration，是基于引入的依赖jar包对springboot应用进行自动配置，提供自动配置的jar包通常以starter结尾，比如mybatis-spring-boot-starter等等。</p><p>springboot默认会扫描项目下所有的配置类并注入到ioc容器中，但集成到其他框架并不能直接注入。为了实现真正的auto configuration，springboot的自动装配也采用了和spi类似的设计思想：</p><ul><li></li></ul><p>使用约定的配置文件：自动装配的配置文件为META-INF/spring.factories，文件内容为org.springframework.boot.autoconfigure.EnableAutoConfiguration=class1,class2,..classN，class是自动配置类的类名</p><ul><li>提供自动配置类的jar包中，需要提供配置文件META-INF/spring.factories</li><li>使用ClassLoader的getResource和getResources方法，读取classpath中的配置文件并使用反射实例化</li></ul><p>例如mybatis-spring-boot-starter的包结构：</p><p><img src="https://storyxc.com/images/blog/image-20220410232256701.png" alt="image-20220410232256701"></p><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>springboot的自动装配核心流程：springboot程序启动，通过spring factories机制加载classpath下的META-INF/spring.factories文件，筛选出所有EnableAutoConfiguration的配置类，反射实例化后注入到springIOC容器中。</p><p>todo：实现一个自定义springboot-starter</p>',34)]))}const h=i(t,[["render",s]]);export{d as __pageData,h as default};
