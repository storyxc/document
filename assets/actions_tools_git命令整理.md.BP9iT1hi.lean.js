import{_ as t,c as o,o as c,a2 as a}from"./chunks/framework.CQECOx-R.js";const g=JSON.parse('{"title":"git命令整理","description":"","frontmatter":{},"headers":[],"relativePath":"actions/tools/git命令整理.md","filePath":"actions/tools/git命令整理.md","lastUpdated":1746516944000}'),i={name:"actions/tools/git命令整理.md"};function p(d,e,s,r,l,n){return c(),o("div",null,e[0]||(e[0]=[a(`<h1 id="git命令整理" tabindex="-1">git命令整理 <a class="header-anchor" href="#git命令整理" aria-label="Permalink to &quot;git命令整理&quot;">​</a></h1><p>版本控制工具一直用的GIT，之前提交代码都是用IDEA集成的GIT可视化工具，命令行几乎不怎么用，由于接下来项目要整合到微服务平台中，项目代码管理也要迁到Gerrit，idea的集成支持不太好，所以整理下GIT的命令，方便后面使用命令行提交代码。 <img src="https://storyxc.com/images/blog//18087435-2b52aaf65be47442.jpg" alt="180874352b52aaf65be47442.jpg"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Remote:远程仓库</span></span>
<span class="line"><span>Reporsitory:本地仓库</span></span>
<span class="line"><span>WorkSpace:工作区</span></span>
<span class="line"><span>Index:暂存区</span></span></code></pre></div><h2 id="撤回修改" tabindex="-1">撤回修改 <a class="header-anchor" href="#撤回修改" aria-label="Permalink to &quot;撤回修改&quot;">​</a></h2><ul><li><p><code>git commit --amend</code> :提交完发现漏掉了几个文件没有添加，或者提交信息写错了,此时，可以运行带有 --amend 选项的提交命令来重新提交</p></li><li><p><code>git checkout -- &lt;file&gt;</code> 把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></li><li><p><code>git reset [--soft | --mixed | --hard] [HEAD]</code></p><ul><li>使用soft只会移动HEAD到上一个版本,可以理解为撤回上一次commit,暂存区和工作区不受影响</li><li>使用mixed在移动HEAD到上一个版本,并且回退暂存区的内容,工作区不受影响</li><li>使用hard,除了移动HEAD指针,取消暂存内容,还会覆盖回退工作区内容,属于比较危险的命令,谨慎使用</li><li>不加括号中的参数 默认参数为mixed, 如果想回退多个版本可以修改为HEAD^^^或HEAD~3代表回退3个版本,依此类推</li></ul></li><li><p>关于<code>git checkout</code>和<code>git reset</code>建议看下这篇文章,<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86#_git_reset" target="_blank" rel="noreferrer">git重置</a></p></li></ul><h2 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h2><p><code>git checkout branch_name</code></p><p>切换分之前要注意本地分支是否有未commit的文件，如果有可以撤销改动，或者commit，再或者使用git stash将当前分支的改动临时保存起来，使当前分支的工作空间和暂存区变干净。然后再进行切换分支；切换回之前的分支，需要恢复被临时保存的改动</p><h2 id="暂存和恢复本地修改" tabindex="-1">暂存和恢复本地修改 <a class="header-anchor" href="#暂存和恢复本地修改" aria-label="Permalink to &quot;暂存和恢复本地修改&quot;">​</a></h2><p><code>git stash -u</code></p><p>恢复本地修改:</p><p>1.先查看有多少个临时保存的改动</p><p><code>git stash list</code></p><p>2.再用<code>git stash apply --index stash@{n}</code>，n为使用git stash list查看到的某个改动的数字</p><p>3.再用<code>git stash drop stash@{n}</code>删除临时保存的改动</p><p>如果只有一个临时的stash，那么可以直接<code>git stash apply</code>即可恢复上次的临时保存记录</p><h2 id="创建本地分支" tabindex="-1">创建本地分支 <a class="header-anchor" href="#创建本地分支" aria-label="Permalink to &quot;创建本地分支&quot;">​</a></h2><p>基于本地master分支创建test分支为例：</p><p>先切换到master分支：<code>git checkout master</code></p><p>建分支： <code>git branch test</code></p><p>切分支：<code>git checkout test</code></p><p>或者</p><p>建分支后切到该分支：<code>git checkout -b test master</code></p><p>以基于某次commit id创建test分支为例：</p><p><code>git checkout -b test 0faceff</code></p><p>其中的0faceff为commit id的前7位</p><p>以基于某个tag创建test分支为例</p><p><code>git checkout -b test v0.1.0</code></p><p>v0.1.0为tag的名称</p><h2 id="查看分支" tabindex="-1">查看分支 <a class="header-anchor" href="#查看分支" aria-label="Permalink to &quot;查看分支&quot;">​</a></h2><p><code>git branch</code>: 只显示本地分支名，当前分支名前有星号</p><p><code>git branch -v</code>：显示本地分支名，当前分支前有星号，显示commit id</p><p><code>git branch -vv</code>：显示本地分支名，当前分支名前有星号，显示commit id，显示追踪的远程分支名</p><p><code>git branch -a</code>：显示所有分支名（包括远程分支）</p><p><code>git branch -r</code>：查看远程分支名</p><h2 id="删除本地分支" tabindex="-1">删除本地分支 <a class="header-anchor" href="#删除本地分支" aria-label="Permalink to &quot;删除本地分支&quot;">​</a></h2><p>普通删除：<code>git branch -d branch_name</code></p><p>强制删除（分支上有修改未合并到其他分支）：<code>git branch -D branch_name</code></p><h2 id="更新代码" tabindex="-1">更新代码 <a class="header-anchor" href="#更新代码" aria-label="Permalink to &quot;更新代码&quot;">​</a></h2><p><code>git pull</code>或者<code>git fetch</code></p><p><code>git pull -v --progress &quot;origin&quot;</code>命令可以显示更详细的信息，git pull命令会fetch所有的远程分支的信息到本地，同时当前本地分支会被合并。</p><p>如果本地有修改文件，而且远程仓库也修改了该文件，pull会失败，提示本地的修改会被合并覆盖，此时可以commit本地的修改或者stash本地的修改，再pull。</p><h2 id="修改代码" tabindex="-1">修改代码 <a class="header-anchor" href="#修改代码" aria-label="Permalink to &quot;修改代码&quot;">​</a></h2><p>首先使用<code>git checkout branch_name</code>切换到正确分支，pull，新建或修改代码，再使用git add 文件名把修改或新增的文件添加到暂存区，再执行commit命令提交到本地仓库。</p><p>其中:</p><p><code>git add 某个文件</code></p><p><code>git add 多个文件</code>（文件名用空格隔开）</p><p><code>git add -u </code>添加所有修改的文件到暂存区</p><p><code>git add .</code>添加所有修改和新增的文件到暂存区</p><p><code>git add -A</code>：添加所有修改，新增和删除的文件到暂存区</p><p><code>git commit 文件名 -m &quot;注释&quot;</code>：commit某个文件</p><p><code>git commit 文件1 文件2 -m &quot;注释&quot;</code> commit多个文件，用空格隔开</p><p><code>git commit -m &quot;注释&quot;</code>commit所有文件</p><p>如果是删除文件，可以使用</p><p><code>rm 文件</code></p><p><code>git add 文件</code></p><p><code>git commit 文件 -m &quot;注释&quot;</code></p><p>如果是重命名文件或者移动文件，可以使用</p><p><code>git mv 源文件路径 目标文件路径</code></p><p><code>git commit 文件 -m &quot;注释&quot;</code></p><ul><li><strong>每次编辑前先进行pull操作，避免再push时产生合并冲突</strong></li></ul><h3 id="push代码带远程仓库" tabindex="-1">push代码带远程仓库 <a class="header-anchor" href="#push代码带远程仓库" aria-label="Permalink to &quot;push代码带远程仓库&quot;">​</a></h3><p>本地代码从本地branch_name分支推到远端branch_name分支：</p><p><code>git checkout branch_name</code></p><p><code>git pull</code></p><p><code>git push origin HEAD:refs/for/branch_name</code></p><p>或者</p><p><code>git checkout branch_name</code></p><p><code>git pull</code></p><p><code>git push origin branch_name:refs/for/branch_name</code></p><h3 id="查看信息" tabindex="-1">查看信息 <a class="header-anchor" href="#查看信息" aria-label="Permalink to &quot;查看信息&quot;">​</a></h3><p><strong><code>git status</code> 显示有变更的文件</strong></p><p><strong><code>git log</code> 显示当前分支的版本历史</strong></p><p><code>git log --stat</code> 显示commit历史，以及每次commit发生变更的文件</p><p><code>git log -S [keyword] </code>搜索提交历史，根据关键词</p><p><code>git log [tag] HEAD --pretty=format:%s</code> 显示某个commit之后的所有变动，每个commit占据一行</p><p><code>git log [tag] HEAD --grep feature</code> 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</p><p><code>git log -p [file] </code>显示指定文件相关的每一次diff</p><p><code>git log -5 --pretty --oneline</code> 显示过去5次提交</p><p><code>git shortlog -sn </code>显示所有提交过的用户，按提交次数排序</p><p><code>git blame [file]</code> 显示指定文件是什么人在什么时间修改过</p><p><strong><code>git diff</code> 显示暂存区和工作区的代码差异</strong></p><p><code>git diff --cached [file]</code> 显示暂存区和上一个commit的差异</p><p><code>git diff HEAD</code> 显示工作区与当前分支最新commit之间的差异</p><p><code>git diff [first-branch]...[second-branch]</code> 显示两次提交之间的差异</p><p><code>git diff --shortstat &quot;@{0 day ago}&quot; </code>显示今天你写了多少行代码</p><p><code>git show [commit]</code> 显示某次提交的元数据和内容变化</p><p><code>git show --name-only [commit] </code>显示某次提交发生变化的文件</p><p><code>git show [commit]:[filename] </code>显示某次提交时，某个文件的内容</p><p><code>git rebase [branch] </code>从本地master拉取代码更新当前分支：branch 一般为master</p><h2 id="fetch-vs-pull" tabindex="-1">fetch vs pull <a class="header-anchor" href="#fetch-vs-pull" aria-label="Permalink to &quot;fetch vs pull&quot;">​</a></h2><p>git fetch是将远程的最新内容拉到本地，用户在检查了以后决定是否合并到本地分支中。 而git pull 则是将远程的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决。</p>`,92)]))}const m=t(i,[["render",p]]);export{g as __pageData,m as default};
