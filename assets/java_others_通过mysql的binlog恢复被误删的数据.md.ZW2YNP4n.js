import{_ as i,c as a,o as n,a2 as l}from"./chunks/framework.CQECOx-R.js";const r=JSON.parse('{"title":"通过mysql的binlog恢复被误删的数据","description":"","frontmatter":{},"headers":[],"relativePath":"java/others/通过mysql的binlog恢复被误删的数据.md","filePath":"java/others/通过mysql的binlog恢复被误删的数据.md","lastUpdated":1746516944000}'),t={name:"java/others/通过mysql的binlog恢复被误删的数据.md"};function h(k,s,p,e,E,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="通过mysql的binlog恢复被误删的数据" tabindex="-1">通过mysql的binlog恢复被误删的数据 <a class="header-anchor" href="#通过mysql的binlog恢复被误删的数据" aria-label="Permalink to &quot;通过mysql的binlog恢复被误删的数据&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>同事手抖在测试环境数据库执行了<code>delete from tb_xxx</code>没加where语句，数据库是单机版且没有备份，且binlog不完整。</p><h2 id="处理" tabindex="-1">处理 <a class="header-anchor" href="#处理" aria-label="Permalink to &quot;处理&quot;">​</a></h2><p>鉴于以上条件，只能通过找出执行的删除语句的binlog，找出来之后将删除语句反向执行了。</p><p>查看binlog文件：<code>SHOW BINARY LOGS;</code></p><p>刷新binlog文件：<code>flush logs;</code>将binlog截断</p><p>查看binlog内容：<code>show binlog events in mysql-bin.xxxx</code></p><p>找到具体删除语句在那个位置/时间后可以将binlog内容导出到文件中</p><p><code>mysqlbinlog --no-defaults --base64-output=decode-rows -v --start-position=xxx --stop-position=xxx --database=xxx /path/to/binlog.0001 &gt; ~/partial_binlog.sql</code></p><p>如果知道具体执行的时间，也可以将开始/结束位点改为开始/结束时间：</p><p><code>mysqlbinlog --no-defaults --base64-output=decode-rows -v --start-datetime=&quot;2024-05-29 14:45:45&quot; --stop-datetime=&quot;2024-05-29 14:50:00&quot; --database=xxx /path/to/binlog.0001 &gt; ~/partial_binlog.sql</code></p><blockquote><p>来自chatgpt的解释</p><h3 id="参数解释" tabindex="-1">参数解释 <a class="header-anchor" href="#参数解释" aria-label="Permalink to &quot;参数解释&quot;">​</a></h3><ol><li><code>mysqlbinlog</code>：这是MySQL提供的一个工具，用于读取二进制日志文件并将其转换为文本格式。</li><li><code>--no-defaults</code>：此选项告诉 <code>mysqlbinlog</code> 工具忽略配置文件中的默认设置，确保命令仅使用显式提供的参数。</li><li><code>--base64-output=decode-rows</code>：此选项指示 <code>mysqlbinlog</code> 工具将以 Base64 编码存储的行事件解码为可读的格式。这样可以更好地查看 <code>DELETE</code>、<code>INSERT</code> 和 <code>UPDATE</code> 语句中的具体数据。</li><li><code>-v</code> 或 <code>--verbose</code>：此选项启用详细输出模式，会显示更多的信息，包括解码后的行事件的具体内容。</li><li><code>--start-position=xxx</code>：指定从二进制日志文件的哪个位置开始读取事件。<code>xxx</code> 应替换为实际的开始位置。</li><li><code>--stop-position=xxx</code>：指定读取到二进制日志文件的哪个位置结束。<code>xxx</code> 应替换为实际的结束位置。</li><li><code>--database=xxx</code>：指定只输出与某个数据库相关的事件。<code>xxx</code> 应替换为实际的数据库名称。</li><li><code>/path/to/binlog.0001</code>：指定要读取的二进制日志文件的路径和名称。需要替换为实际的文件路径。</li><li><code>&gt; ~/partial_binlog.sql</code>：将输出重定向到指定的文件 <code>~/partial_binlog.sql</code> 中。</li></ol><h3 id="作用总结" tabindex="-1">作用总结 <a class="header-anchor" href="#作用总结" aria-label="Permalink to &quot;作用总结&quot;">​</a></h3><p>这条命令会：</p><ul><li>从指定的二进制日志文件 (<code>/path/to/binlog.0001</code>) 中读取日志事件。</li><li>仅提取与指定数据库 (<code>--database=xxx</code>) 相关的事件。</li><li>从指定的开始位置 (<code>--start-position=xxx</code>) 到结束位置 (<code>--stop-position=xxx</code>) 之间的日志事件。</li><li>将日志事件解码为可读的SQL语句，并将输出写入到文件 <code>~/partial_binlog.sql</code> 中。</li></ul><p>此命令常用于从二进制日志中恢复特定时间范围内的数据库操作，特别是用于数据恢复或审计操作。</p></blockquote><p>执行结束后会在文件最后部份注释中输出解码后的DELETE语句内容，这里直接通过python脚本处理一下，把DELETE替换成INSERT语句，回到数据库中执行即可。（需要稍微调整下细节）</p><p>脚本：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 打开原始binlog日志文件和目标SQL文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;partial_binlog.sql&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output_file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ok.sql&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 读取原始binlog文件内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_file, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f.read()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 替换DELETE为INSERT，使用正则表达式进行复杂替换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">### DELETE FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;;INSERT INTO&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">### WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SELECT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">###</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@1=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-9][0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-9][0-9][0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 将处理后的内容写入目标SQL文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output_file, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        f.write(content)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;转换完成:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output_file)</span></span></code></pre></div>`,16)]))}const g=i(t,[["render",h]]);export{r as __pageData,g as default};
