import{_ as i,c as s,o as l,a2 as e}from"./chunks/framework.CQECOx-R.js";const k=JSON.parse('{"title":"使用pandas模块进行数据处理","description":"","frontmatter":{},"headers":[],"relativePath":"python/others/使用pandas模块进行数据处理.md","filePath":"python/others/使用pandas模块进行数据处理.md","lastUpdated":1746516944000}'),n={name:"python/others/使用pandas模块进行数据处理.md"};function p(t,a,d,h,o,r){return l(),s("div",null,a[0]||(a[0]=[e(`<h1 id="使用pandas模块进行数据处理" tabindex="-1">使用pandas模块进行数据处理 <a class="header-anchor" href="#使用pandas模块进行数据处理" aria-label="Permalink to &quot;使用pandas模块进行数据处理&quot;">​</a></h1><blockquote><p>以csv/txt文件为例</p></blockquote><h2 id="读取文件" tabindex="-1">读取文件 <a class="header-anchor" href="#读取文件" aria-label="Permalink to &quot;读取文件&quot;">​</a></h2><p><code>pd.read_csv()</code>：返回一个DataFrame或TextFileReader</p><ul><li><p>header指定具体表头行数,如果没有则header=None，第一行是表头则header=0,header还可以是一个列表例如header=[0,1,3],此时会有多个标题，且1和3之间的行会被忽略掉</p></li><li><p>seq指定分割符，默认为&#39;,&#39;</p></li><li><p>skiprows跳过某一行，行号从0开始，例如skiprows=2或skiprows=[0,1,200]</p></li><li><p>nrows指定需要读取的行数，从第一行开始,例如nrows=1000</p></li><li><p>na_values空值置换,会把指定的值替换为空值例如na_values=[&#39;\\N&#39;, 15]会把字符串\\N和数字15替换为空值NaN</p><ul><li>如果na_values的参数是一个字典，那就可以为具体的列来指定缺失值的样子。我们就可以指定在Age这一列，0要被看成缺失值；在Comment这一列，“该用户没有评价”被看成缺失值。<code>na_values={&#39;Age&#39;:0,&#39;Comment&#39;:&#39;该用户没有评价&#39;}</code></li></ul></li><li><p>iterator: True时返回一个TextFileReader，用于大文件处理，可以逐块处理文件</p></li><li><p>chunksize：指定文件块大小，返回一个TextFileReader</p></li><li><p>encoding：指定编码</p></li><li><p>index_col：读取时指定索引列，和df.set_index效果相同</p></li><li><p>names：文件中没有表头，手动指定表头，需要和header配合使用</p></li></ul><blockquote><p>names和header的使用场景主要如下：</p><ol><li>csv文件有表头并且是第一行，那么names和header都无需指定;</li><li>csv文件有表头、但表头不是第一行，可能从下面几行开始才是真正的表头和数据，这个时候指定header即可;</li><li>csv文件没有表头，全部是纯数据，那么我们可以通过names手动生成表头;</li><li>csv文件有表头、但是这个表头你不想用，这个时候同时指定names和header。先用header选出表头和数据，然后再用names将表头替换掉，其实就等价于将数据读取进来之后再对列名进行rename;</li></ol></blockquote><h2 id="数据相关概念" tabindex="-1">数据相关概念 <a class="header-anchor" href="#数据相关概念" aria-label="Permalink to &quot;数据相关概念&quot;">​</a></h2><h3 id="dataframe" tabindex="-1">DataFrame <a class="header-anchor" href="#dataframe" aria-label="Permalink to &quot;DataFrame&quot;">​</a></h3><p>多行多列的二维数组、整个表格、多行多列</p><h3 id="series" tabindex="-1">Series <a class="header-anchor" href="#series" aria-label="Permalink to &quot;Series&quot;">​</a></h3><p>一维数据、一行或一列</p><h3 id="index" tabindex="-1">index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;index&quot;">​</a></h3><p>对应纵向上的行</p><blockquote><p>替换索引为某一列的值：df.set_index(&#39;xxx&#39;, inplace=True)</p></blockquote><h3 id="columns" tabindex="-1">columns <a class="header-anchor" href="#columns" aria-label="Permalink to &quot;columns&quot;">​</a></h3><p>对应横向上的列</p><h2 id="查询数据" tabindex="-1">查询数据 <a class="header-anchor" href="#查询数据" aria-label="Permalink to &quot;查询数据&quot;">​</a></h2><h3 id="几种方法" tabindex="-1">几种方法 <a class="header-anchor" href="#几种方法" aria-label="Permalink to &quot;几种方法&quot;">​</a></h3><ol><li><p>df.loc，根据行、列的标签值查询（既能查询又能覆盖写入）</p><ul><li><p>行根据行标签，也就是索引筛选，列根据列标签，列名筛选</p></li><li><p>如果选取的是所有行或者所有列，可以用：代替</p></li><li><p>行标签选取的时候，两端都包含，比如[0:5]指的是0，1，2，3，4，5</p></li></ul></li><li><p>df.iloc，根据行、列的数字位置查询</p><ul><li><p>iloc基于位置索引，简言之，就是第几行第几列，只不过这里的<strong>行列都是从0开始</strong>的。</p></li><li><p>iloc的0：X中不包括X，只能到X-1.</p></li></ul></li><li><p>df.where</p></li><li><p>df.query</p></li></ol><h3 id="df-loc" tabindex="-1">df.loc <a class="header-anchor" href="#df-loc" aria-label="Permalink to &quot;df.loc&quot;">​</a></h3><ol><li><p>使用单个label值查询</p><ul><li><p>查找并替换某一列的值&amp;转换数据类型：df.loc[:, &#39;x&#39;] = df[&#39;x&#39;].str.replace(&#39;X&#39;,&#39;&#39;).astype(&#39;int32&#39;)</p></li><li><p>查询单个值：df.loc[&#39;index&#39;, &#39;column&#39;]</p></li><li><p>得到一个Series：df.loc[&#39;index&#39;, [&#39;column1&#39;, &#39;column2&#39;]]</p></li></ul></li><li><p>使用值列表批量查询</p><ul><li>得到一个Series：df.loc([&#39;index1&#39;, &#39;index2&#39;, &#39;index3&#39;], &#39;column1&#39;)</li><li>得到DataFrame：df.loc([&#39;index1&#39;, &#39;index2&#39;, &#39;index3&#39;], [&#39;column1&#39;, &#39;column2&#39;])</li></ul></li><li><p>使用数值区间进行范围查询（包含区间的开始和结尾）</p><ul><li>行index按区间：df.loc[1:2, &#39;colum1&#39;]</li><li>列index按区间：df.loc[1, &#39;column1&#39;: &#39;column2&#39;]</li><li>行列都按区间：df.loc[1:2, &#39;column1&#39;: &#39;column2&#39;]</li></ul></li><li><p>使用条件表达式查询</p><ul><li>简单条件查询，年龄小于18：df.loc[df[&#39;age&#39;] &lt; 18, :]</li><li>复杂条件查询，年龄小于18且姓名为张三：df.loc[(df[&#39;age&#39;] &lt; 18) &amp; (df[&#39;name&#39;] == &#39;张三&#39;), :]</li></ul></li><li><p>调用函数查询</p><ul><li><p>lambda表达式：df.loc[lambda df: df[&#39;age&#39;] &gt; 18, :]</p></li><li><p>调用函数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query_adult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.loc[query_adult, :]</span></span></code></pre></div></li></ul></li></ol><h2 id="新增数据列" tabindex="-1">新增数据列 <a class="header-anchor" href="#新增数据列" aria-label="Permalink to &quot;新增数据列&quot;">​</a></h2><h3 id="几种方法-1" tabindex="-1">几种方法 <a class="header-anchor" href="#几种方法-1" aria-label="Permalink to &quot;几种方法&quot;">​</a></h3><ol><li><p>直接赋值</p><ul><li>df.loc[:, &#39;newAge&#39;] = df[&#39;age&#39;] + 1</li></ul></li><li><p>df.apply</p><ul><li><p>apply赋值 基于 0-&#39;index&#39; 1-&#39;columns&#39; 操作跨行/跨列</p></li><li><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_is_adult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;成年&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;未成年&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df.loc[:, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;isAdult&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df.apply(get_is_adult, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul></li><li><p>df.assign</p><ul><li>assign添加一列：返回一个新的DataFrame，存在的列会被覆盖，如果参数是callable只能直接操作DataFrame，如果不是callable则直接赋值</li><li>df = df.assign(newAge=lambda x: x[&#39;age&#39;] + 1)</li></ul></li><li><p>按条件选择分组并分别赋值</p><ul><li>df.loc[df[&#39;highTemp&#39;] - df[&#39;lowTemp&#39;] &gt; 10, &#39;tempDiff&#39;] = &#39;温差大&#39;</li><li>df.loc[df[&#39;highTemp&#39;] - df[&#39;lowTemp&#39;] &lt;= 10, &#39;tempDiff&#39;] = &#39;温差小&#39;</li></ul><blockquote><p>按字段分组查看数量： df[&#39;tempDiff&#39;].value_counts()</p></blockquote></li></ol><h2 id="数据合并" tabindex="-1">数据合并 <a class="header-anchor" href="#数据合并" aria-label="Permalink to &quot;数据合并&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>df_list = [df]</span></span>
<span class="line"><span>df2 = pd.concat(df_list)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if not os.path.exists(&#39;../resources/data1.csv&#39;):</span></span>
<span class="line"><span>    df2.to_csv(&#39;../resources/data1.csv&#39;, mode=&#39;a&#39;, index=False, header=True)</span></span>
<span class="line"><span>else:</span></span>
<span class="line"><span>    df2.to_csv(&#39;../resources/data1.csv&#39;, mode=&#39;a&#39;, index=False, header=False)</span></span></code></pre></div><h2 id="axis参数" tabindex="-1">axis参数 <a class="header-anchor" href="#axis参数" aria-label="Permalink to &quot;axis参数&quot;">​</a></h2><p>pandas的axis参数：指的是跨该axis，例如指定columns 则是跨列，也就是沿着列名水平方向执行</p><ul><li><p>跨列操作：在横向上遍历每行，对每行的数据进行操作</p></li><li><p>跨行操作：在水平方向遍历每列，对每列数据进行操作</p></li></ul>`,29)]))}const u=i(n,[["render",p]]);export{k as __pageData,u as default};
