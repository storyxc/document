import{_ as s,c as t,o as e,a2 as c}from"./chunks/framework.CQECOx-R.js";const _=JSON.parse('{"title":"mybatis的classpath配置导致的jar包读取问题","description":"","frontmatter":{},"headers":[],"relativePath":"java/others/mybatis的classpath配置导致的jar包读取问题.md","filePath":"java/others/mybatis的classpath配置导致的jar包读取问题.md","lastUpdated":1746516944000}'),r={name:"java/others/mybatis的classpath配置导致的jar包读取问题.md"};function p(l,a,o,i,h,d){return e(),t("div",null,a[0]||(a[0]=[c('<h1 id="mybatis的classpath配置导致的jar包读取问题" tabindex="-1">mybatis的classpath配置导致的jar包读取问题 <a class="header-anchor" href="#mybatis的classpath配置导致的jar包读取问题" aria-label="Permalink to &quot;mybatis的classpath配置导致的jar包读取问题&quot;">​</a></h1><p>今天同事碰到个问题，在服务中引入了另一个服务的mapper文件后找不到其中配置的resultMap引发报错。后经排查是因为配置文件中classpath的配置问题引起的。</p><p><code>classpath:</code>: 只会从当前服务的class目录下寻找文件</p><p><code>classpath*:</code>: 会从class目录下寻找文件，还会从引入的依赖（打包后lib文件夹中的jar包）中寻找文件</p><p>所以当把mybatis的classpath配置从<code>classpath:</code>改为<code>classpath*:</code>后问题能解决了</p>',5)]))}const n=s(r,[["render",p]]);export{_ as __pageData,n as default};
