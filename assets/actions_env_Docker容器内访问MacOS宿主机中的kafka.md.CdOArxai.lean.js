import{_ as e,c as s,o as i,a2 as t}from"./chunks/framework.CQECOx-R.js";const p=JSON.parse('{"title":"Docker容器内访问MacOS宿主机中的kafka","description":"","frontmatter":{},"headers":[],"relativePath":"actions/env/Docker容器内访问MacOS宿主机中的kafka.md","filePath":"actions/env/Docker容器内访问MacOS宿主机中的kafka.md","lastUpdated":1746516944000}'),r={name:"actions/env/Docker容器内访问MacOS宿主机中的kafka.md"};function k(o,a,n,l,h,d){return i(),s("div",null,a[0]||(a[0]=[t(`<h1 id="docker容器内访问macos宿主机中的kafka" tabindex="-1">Docker容器内访问MacOS宿主机中的kafka <a class="header-anchor" href="#docker容器内访问macos宿主机中的kafka" aria-label="Permalink to &quot;Docker容器内访问MacOS宿主机中的kafka&quot;">​</a></h1><h2 id="kafka配置" tabindex="-1">kafka配置 <a class="header-anchor" href="#kafka配置" aria-label="Permalink to &quot;kafka配置&quot;">​</a></h2><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># server.properties</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">listeners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=PLAINTEXT://:9092</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">advertised.listeners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=PLAINTEXT://host.docker.internal:9092</span></span></code></pre></div><h2 id="etc-hosts配置" tabindex="-1">/etc/hosts配置 <a class="header-anchor" href="#etc-hosts配置" aria-label="Permalink to &quot;/etc/hosts配置&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host.docker.internal</span></span></code></pre></div><h2 id="验证" tabindex="-1">验证 <a class="header-anchor" href="#验证" aria-label="Permalink to &quot;验证&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># List brokers and topics in cluster</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network=host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --platform=linux/amd64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edenhill/kcat:1.7.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host.docker.internal</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span></span></code></pre></div><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><h3 id="连接kafka的broker过程" tabindex="-1">连接kafka的broker过程 <a class="header-anchor" href="#连接kafka的broker过程" aria-label="Permalink to &quot;连接kafka的broker过程&quot;">​</a></h3><ul><li>kafka客户端通过<code>bootstrap.servers</code>配置的地址去连接kafka的broker</li><li>broker会返回<code>advertised.listeners</code>配置的地址给kafka客户端</li><li>kafka客户端会通过<code>advertised.listeners</code>配置的地址去连接kafka的broker</li></ul><h3 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h3><h4 id="容器内连接" tabindex="-1">容器内连接 <a class="header-anchor" href="#容器内连接" aria-label="Permalink to &quot;容器内连接&quot;">​</a></h4><p>如果kafka只配置<code>listeners=PLAINTEXT://:9092</code>而不配置<code>advertised.listeners=PLAINTEXT://host.docker.internal:9092</code>，那么kafka容器内部的客户端是无法访问到kafka的，因为kafka容器内部的客户端会通过<code>advertised.listeners</code>配置的地址去访问kafka，而默认的<code>advertised.listeners</code>配置和<code>listeners</code>一致，也是<code>PLAINTEXT://:9092</code>，对于容器内的客户端来说这个地址是容器内部的地址，所以容器内部的客户端无法访问到宿主机kafka。因此要加上<code>advertised.listeners=PLAINTEXT://host.docker.internal:9092</code>。</p><h4 id="宿主机上连接" tabindex="-1">宿主机上连接 <a class="header-anchor" href="#宿主机上连接" aria-label="Permalink to &quot;宿主机上连接&quot;">​</a></h4><p>因为配置了<code>advertised.listeners=PLAINTEXT://host.docker.internal:9092</code>，所以宿主机上的客户端也会通过<code>host.docker.internal:9092</code>访问kafka的broker，所以要在<code>/etc/hosts</code>中增加解析<code>host.docker.internal</code>到本地回环地址的配置。</p>`,15)]))}const f=e(r,[["render",k]]);export{p as __pageData,f as default};
