import{_ as s,c as a,o as e,a2 as i}from"./chunks/framework.CQECOx-R.js";const k=JSON.parse('{"title":"nginx配置","description":"","frontmatter":{},"headers":[],"relativePath":"linux/applications/Nginx配置.md","filePath":"linux/applications/Nginx配置.md","lastUpdated":1746516944000}'),d={name:"linux/applications/Nginx配置.md"};function r(n,t,l,p,h,o){return e(),a("div",null,t[0]||(t[0]=[i(`<h1 id="nginx配置" tabindex="-1">nginx配置 <a class="header-anchor" href="#nginx配置" aria-label="Permalink to &quot;nginx配置&quot;">​</a></h1><p>记录常用、踩坑的nginx配置内容</p><h2 id="http" tabindex="-1">http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;http&quot;">​</a></h2><h3 id="upstream" tabindex="-1">upstream <a class="header-anchor" href="#upstream" aria-label="Permalink to &quot;upstream&quot;">​</a></h3><blockquote><p>upstream指令主要用于负载均衡，设置一系列的后端服务器</p></blockquote><h3 id="server" tabindex="-1">server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;server&quot;">​</a></h3><blockquote><p>server块的指令主要用于指定主机和端口</p></blockquote><h4 id="listen" tabindex="-1">listen <a class="header-anchor" href="#listen" aria-label="Permalink to &quot;listen&quot;">​</a></h4><p>监听的端口号</p><ul><li><p><code>default_server</code>：定义默认的 server 处理没有成功匹配 server_name 的请求，如果没有显式定义，则会选取第一个定义的server作为default_server。</p><ul><li><p>显式定义：<code>listen 80 default_server</code></p></li><li><p>隐式定义</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 如果没有显式声明 default server 则第一个 server 会被隐式的设为 default server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># _ 并不是重点 __ 也可以 ___也可以</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 403 forbidden</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www.a.com;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ul><h4 id="server-name" tabindex="-1">server_name <a class="header-anchor" href="#server-name" aria-label="Permalink to &quot;server_name&quot;">​</a></h4><ul><li><p><code>server_name storyxc.com</code>：完整匹配</p></li><li><p><code>server_name *.storyxc.com</code>：<code>*</code>开始的通配符匹配</p><ul><li>特殊情况：<code>.storyxc.com</code>能同时匹配<code>storyxc.com</code>和<code>*.storyxc.com</code></li></ul><blockquote><p>A wildcard name may contain an asterisk only on the name’s start or end, and only on a dot border. The names “<code>www.*.example.org</code>” and “<code>w*.example.org</code>” are invalid. However, these names can be specified using regular expressions, for example, “<code>~^www\\..+\\.example\\.org$</code>” and “<code>~^w.*\\.example\\.org$</code>”. An asterisk can match several name parts. The name “<code>*.example.org</code>” matches not only <code>www.example.org</code> but <code>www.sub.example.org</code> as well.</p><p>A special wildcard name in the form “<code>.example.org</code>” can be used to match both the exact name “<code>example.org</code>” and the wildcard name “<code>*.example.org</code>”.</p></blockquote></li><li><p><code>server_name mail.* </code>：<code>*</code>结尾的通配符匹配</p></li><li><p><code>server_name ~^(?&lt;user&gt;.+)\\.storyxc\\.com$</code>第一个匹配的正则表达式（按照配置文件中出现的顺序）</p></li><li><p><code>server_name _</code>：通常使用<code>_</code>作为<code>default server</code>的server_name</p></li></ul><h3 id="location" tabindex="-1">location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;location&quot;">​</a></h3><blockquote><p>location块用于匹配网页位置</p></blockquote><h4 id="匹配规则" tabindex="-1">匹配规则 <a class="header-anchor" href="#匹配规则" aria-label="Permalink to &quot;匹配规则&quot;">​</a></h4><p>location支持正则表达式匹配，也支持条件判断匹配</p><p>语法规则：<code> location [=|~|~*|^~] /uri/ { … }</code></p><ul><li><code>=</code>：完全精确匹配</li><li><code>^~</code>：表示uri以某个常规字符串开头，理解为匹配url路径即可，nginx不对url进行编码</li><li><code>~</code>：表示区分大小写的正则匹配</li><li><code>~*</code>：表示不区分大小写的正则匹配</li><li><code>!~</code>：区分大小写不匹配</li><li><code>!~*</code>：不区分大小写不匹配</li><li><code>/</code>：通用匹配，优先级最低</li></ul><p>匹配顺序：<code>=</code>最高，正则匹配其次（按照规则顺序），通用匹配<code>/</code>最低，匹配成功时停止匹配按照当前规则处理请求</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> .*\\.(gif|jpg|jpeg|png|bmp|swf)$ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 匹配所有扩展名以.gif、.jpg、.jpeg、.png、.bmp、.swf结尾的静态文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/wwwroot/xxx;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # expires用来指定静态文件的过期时间，这里是30天</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    expires </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ^/(upload|html)/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 匹配所有/upload /html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/web/wwwroot/www.cszhi.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	expires </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="location和proxy-pass是否带-的影响" tabindex="-1">location和proxy_pass是否带<code>/</code>的影响 <a class="header-anchor" href="#location和proxy-pass是否带-的影响" aria-label="Permalink to &quot;location和proxy_pass是否带\`/\`的影响&quot;">​</a></h4><blockquote><p><a href="https://github.com/xqin/nginx-proxypass-server-paths" target="_blank" rel="noreferrer">https://github.com/xqin/nginx-proxypass-server-paths</a></p></blockquote><table><thead><tr><th>Case #</th><th>Nginx location</th><th>proxy_pass URL</th><th>Test URL</th><th>Path received</th></tr></thead><tbody><tr><td>01</td><td>/test01</td><td><a href="http://127.0.0.1:8080/" target="_blank" rel="noreferrer">http://127.0.0.1:8080</a></td><td>/test01/abc/test</td><td>/test01/abc/test</td></tr><tr><td>02</td><td>/test02</td><td><a href="http://127.0.0.1:8080/" target="_blank" rel="noreferrer">http://127.0.0.1:8080/</a></td><td>/test02/abc/test</td><td>//abc/test</td></tr><tr><td>03</td><td>/test03/</td><td><a href="http://127.0.0.1:8080/" target="_blank" rel="noreferrer">http://127.0.0.1:8080</a></td><td>/test03/abc/test</td><td>/test03/abc/test</td></tr><tr><td>04</td><td>/test04/</td><td><a href="http://127.0.0.1:8080/" target="_blank" rel="noreferrer">http://127.0.0.1:8080/</a></td><td>/test04/abc/test</td><td>/abc/test</td></tr><tr><td>05</td><td>/test05</td><td><a href="http://127.0.0.1:8080/app1" target="_blank" rel="noreferrer">http://127.0.0.1:8080/app1</a></td><td>/test05/abc/test</td><td>/app1/abc/test</td></tr><tr><td>06</td><td>/test06</td><td><a href="http://127.0.0.1:8080/app1/" target="_blank" rel="noreferrer">http://127.0.0.1:8080/app1/</a></td><td>/test06/abc/test</td><td>/app1//abc/test</td></tr><tr><td>07</td><td>/test07/</td><td><a href="http://127.0.0.1:8080/app1" target="_blank" rel="noreferrer">http://127.0.0.1:8080/app1</a></td><td>/test07/abc/test</td><td>/app1abc/test</td></tr><tr><td>08</td><td>/test08/</td><td><a href="http://127.0.0.1:8080/app1/" target="_blank" rel="noreferrer">http://127.0.0.1:8080/app1/</a></td><td>/test08/abc/test</td><td>/app1/abc/test</td></tr><tr><td>09</td><td>/</td><td><a href="http://127.0.0.1:8080/" target="_blank" rel="noreferrer">http://127.0.0.1:8080</a></td><td>/test09/abc/test</td><td>/test09/abc/test</td></tr><tr><td>10</td><td>/</td><td><a href="http://127.0.0.1:8080/" target="_blank" rel="noreferrer">http://127.0.0.1:8080/</a></td><td>/test10/abc/test</td><td>/test10/abc/test</td></tr><tr><td>11</td><td>/</td><td><a href="http://127.0.0.1:8080/app1" target="_blank" rel="noreferrer">http://127.0.0.1:8080/app1</a></td><td>/test11/abc/test</td><td>/app1test11/abc/test</td></tr><tr><td>12</td><td>/</td><td><a href="http://127.0.0.1:8080/app2/" target="_blank" rel="noreferrer">http://127.0.0.1:8080/app2/</a></td><td>/test12/abc/test</td><td>/app2/test12/abc/test</td></tr></tbody></table><h4 id="root和alias区别" tabindex="-1">root和alias区别 <a class="header-anchor" href="#root和alias区别" aria-label="Permalink to &quot;root和alias区别&quot;">​</a></h4><ul><li>alias指定的是准确目录，且最后必须是<code>/</code>，否则就会访问失败</li><li>root是指定目录的上级目录</li></ul><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /abc </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/wwwroot/aaa;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	# 此规则匹配的最终资源路径为/wwwroot/aaa/abc/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果访问的是/abc/a.html,则最终访问的资源是服务器中的/wwwroot/aaa/abc/a.html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /abc </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  alias </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/wwwroot/aaa/;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 此规则匹配的最终资源路径为/wwwroot/aaa/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果访问的是/abc/b.txt，则最终访问的资源是/wwwroot/aaa/b.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="访问静态资源重定向问题" tabindex="-1">访问静态资源重定向问题 <a class="header-anchor" href="#访问静态资源重定向问题" aria-label="Permalink to &quot;访问静态资源重定向问题&quot;">​</a></h4><p>当nginx监听的不是80端口时，访问文件夹且末尾不是<code>/</code>，则nginx会进行301永久重定向，此时会丢掉客户端访问时的端口号，可以通过以下配置解决，作用是将不以 <code>/</code> 结尾的目录 URL 重定向至以 <code>/</code> 结尾的目录 URL。使用 <code>-d</code> 判断 <code>$request_filename</code> 是否为一个目录，如果是，则使用 <code>rewrite</code> 指令进行重写。其中，<code>[^/]$</code> 表示匹配不以 <code>/</code> 结尾的 URL，即目录 URL，<code>$scheme://$http_host$uri/</code> 表示重定向目标 URL，其中使用了 <code>$scheme</code> 变量表示客户端请求所使用的协议（HTTP 或 HTTPS）、<code>$http_host</code> 变量表示客户端请求的 HOST 头部信息、<code>$uri</code> 变量表示客户端请求的 URI。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-d </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$request_filename) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        rewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">^/]$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $scheme://$http_host$uri/ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">permanent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><table><thead><tr><th>变量名</th><th>作用</th></tr></thead><tbody><tr><td>$scheme</td><td>请求使用的协议 (http 或 https)</td></tr><tr><td>$host</td><td>当前请求的主机名，不包括端口号。</td></tr><tr><td>$http_host</td><td>完整的HTTP主机头，包括主机名和端口号。</td></tr><tr><td>$request_uri</td><td>完整的请求 URI,包括查询字符串</td></tr><tr><td>$uri</td><td>当前请求的 URI (不包含请求参数)</td></tr><tr><td>$args</td><td>当前请求的参数部分,不包括问号</td></tr><tr><td>$request_method</td><td>当前请求的方法 (GET、POST 等)</td></tr><tr><td>$remote_addr</td><td>客户端 IP 地址</td></tr><tr><td>$server_addr</td><td>服务器 IP 地址</td></tr><tr><td>$server_name</td><td>当前请求的服务器名称</td></tr><tr><td>$server_protocol</td><td>服务器使用的协议版本</td></tr><tr><td>$request_filename</td><td>当前请求的文件路径和名称</td></tr><tr><td>$document_root</td><td>当前请求的根目录</td></tr><tr><td>$is_args</td><td>如果请求包含参数部分，值为 ?，否则为空字符串</td></tr><tr><td>$query_string</td><td>当前请求的查询字符串部分,包括问号（?）</td></tr><tr><td>$http_user_agent</td><td>客户端发送的 User-Agent 头部信息</td></tr><tr><td>$http_referer</td><td>客户端发送的 Referer 头部信息</td></tr><tr><td>$http_cookie</td><td>客户端发送的 Cookie 头部信息</td></tr><tr><td>$remote_port</td><td>客户端端口号</td></tr><tr><td>$server_port</td><td>服务器端口号</td></tr><tr><td>$realpath_root</td><td>请求根目录的实际路径</td></tr><tr><td>$content_type</td><td>请求的内容类型</td></tr><tr><td>$content_length</td><td>请求的内容长度</td></tr><tr><td>$request_body</td><td>请求的主体内容</td></tr></tbody></table><h2 id="proxy-set-header" tabindex="-1">proxy_set_header <a class="header-anchor" href="#proxy-set-header" aria-label="Permalink to &quot;proxy_set_header&quot;">​</a></h2><table><thead><tr><th>配置指令</th><th>作用</th></tr></thead><tbody><tr><td><code>proxy_set_header Host $host;</code></td><td>设置代理请求的主机头，通常用于传递客户端的原始主机头。<code>$http_host</code>传递包含端口号。</td></tr><tr><td><code>proxy_set_header X-Real-IP $remote_addr;</code></td><td>设置代理请求的客户端真实IP地址，用于传递客户端的真实IP地址给后端服务器。</td></tr><tr><td><code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code></td><td>用于将客户端的原始IP地址添加到<code>X-Forwarded-For</code>头中，以便后端服务器知道请求的真实来源。</td></tr><tr><td><code>proxy_set_header X-Forwarded-Proto $scheme;</code></td><td>设置代理请求的协议（HTTP或HTTPS），以便后端服务器知道请求的协议类型。</td></tr><tr><td><code>proxy_set_header User-Agent $http_user_agent;</code></td><td>传递客户端的User-Agent头，用于识别客户端的浏览器或应用程序。</td></tr><tr><td><code>proxy_set_header Referer $http_referer;</code></td><td>传递客户端的Referer头，通常用于跟踪页面来源。</td></tr><tr><td><code>proxy_set_header Cookie $http_cookie;</code></td><td>传递客户端的Cookie头，以便后端服务器可以访问客户端的Cookie数据。</td></tr><tr><td><code>proxy_set_header Connection &quot;&quot;;</code></td><td>清除代理请求的Connection头，通常用于避免代理干扰连接的管理。</td></tr><tr><td><code>proxy_set_header Upgrade $http_upgrade;</code></td><td>用于处理WebSocket连接的Upgrade头，通常与WebSocket代理一起使用。</td></tr><tr><td><code>proxy_set_header X-Frame-Options SAMEORIGIN;</code></td><td>用于设置<code>X-Frame-Options</code>头，控制网页是否可以嵌套在其他网页中显示。</td></tr></tbody></table>`,34)]))}const g=s(d,[["render",r]]);export{k as __pageData,g as default};
